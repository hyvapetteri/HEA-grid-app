"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var GridDirection;
(function (GridDirection) {
    GridDirection[GridDirection["Up"] = 0] = "Up";
    GridDirection[GridDirection["Down"] = 1] = "Down";
    GridDirection[GridDirection["Right"] = 2] = "Right";
    GridDirection[GridDirection["Left"] = 3] = "Left";
})(GridDirection = exports.GridDirection || (exports.GridDirection = {}));
var TrialAnswer;
(function (TrialAnswer) {
    TrialAnswer["Correct"] = "correct";
    TrialAnswer["Wrong"] = "wrong";
})(TrialAnswer = exports.TrialAnswer || (exports.TrialAnswer = {}));
var GridTracker = (function () {
    function GridTracker(params) {
        this.grid = params.g;
        this.m_up = params.m_up;
        this.n_down = params.n_down;
        this.answerBuffer = new Array(Math.max(params.m_up, params.n_down));
        this.n_max_reversals = params.n_revs;
        this.n_max_steps = params.n_step;
        this.initialized = false;
    }
    GridTracker.prototype.getLastNAnswers = function (n) {
        var i = Math.min(this.answerBuffer.length, Math.abs(n));
        return this.answerBuffer.slice(-1 * i);
    };
    GridTracker.prototype.getStatus = function () {
        return this.status;
    };
    GridTracker.prototype.getHistory = function () {
        return this.history;
    };
    GridTracker.prototype.getStepsize = function () {
        return this.status.stepsize;
    };
    GridTracker.prototype.setStepsize = function (xstep, ystep) {
        this.status.stepsize = [xstep, ystep];
    };
    GridTracker.prototype.initialize = function (x, y) {
        this.status = {
            xidx: x,
            yidx: y,
            stepsize: [1, 1],
            direction: GridDirection.Up,
            adjust_difficulty: 0,
            finished: false
        };
        this.history = [];
        this.reversal_counter = 0;
        this.initialized = true;
    };
    GridTracker.prototype.updatePosition = function (ans) {
        if (!this.initialized) {
            throw new Error('Tracker not initialized.');
        }
        if (this.status.finished) {
            throw new Error('Tracker has already finished. Re-initialize to start a new run.');
        }
        this.answerBuffer.shift();
        this.answerBuffer.push(ans);
        this.status.answer = ans;
        // compute the m-up-n-down rule
        if (ans == TrialAnswer.Correct) {
            var n_down_buffer = this.getLastNAnswers(this.n_down);
            if (n_down_buffer.every(function (a) { return a == TrialAnswer.Correct; })) {
                this.status.adjust_difficulty = -1; // negative -> go down = increase difficulty
                this.answerBuffer = new Array(this.answerBuffer.length); // reset buffer
            }
            else {
                this.status.adjust_difficulty = 0; // not yet n correct answers, keep going
            }
        }
        else if (ans == TrialAnswer.Wrong) {
            var m_up_buffer = this.getLastNAnswers(this.m_up);
            if (m_up_buffer.every(function (a) { return a == TrialAnswer.Wrong; })) {
                this.status.adjust_difficulty = 1; // positive ->  go up = decrease difficulty
                this.answerBuffer = new Array(this.answerBuffer.length);
            }
            else {
                this.status.adjust_difficulty = 0;
            }
        }
        // determine next grid direction
        if (this.status.adjust_difficulty < 0) {
            if (this.status.direction == GridDirection.Up) {
                this.status.direction = GridDirection.Left;
            }
            else if (this.status.direction == GridDirection.Right) {
                this.status.direction = GridDirection.Down;
            } // otherwise current direction is down or left -> keep going
        }
        else if (this.status.adjust_difficulty > 0) {
            if (this.status.direction == GridDirection.Down) {
                this.status.direction = GridDirection.Right;
            }
            else if (this.status.direction == GridDirection.Left) {
                this.status.direction = GridDirection.Up;
            } // otherwise current direction is up or right -> keep going
        }
        // determine new position towards the chosen direction
        var new_yidx = this.status.yidx;
        var new_xidx = this.status.xidx;
        switch (this.status.direction) {
            case GridDirection.Up:
                new_yidx = new_yidx + this.status.stepsize[1];
                break;
            case GridDirection.Right:
                new_xidx = new_xidx + this.status.stepsize[0];
                break;
            case GridDirection.Down:
                new_yidx = new_yidx - this.status.stepsize[1];
                break;
            case GridDirection.Left:
                new_xidx = new_xidx - this.status.stepsize[0];
                break;
        }
        // check if we reached the grid boundaries
        if (new_yidx > this.grid.getYlim()[1]) {
            if (this.status.direction == GridDirection.Up) {
                // max y value reached, change direction to right, i.e. keep
                // decreasing difficulty
                new_yidx = this.grid.getYlim()[1];
                this.status.direction = GridDirection.Right;
                this.status.reversal = true;
                this.reversal_counter = this.reversal_counter + 1;
                new_xidx = new_xidx + this.status.stepsize[0];
                if (new_xidx > this.grid.getXlim[1]) {
                    throw new Error('Grid: Upper right corner reached.');
                }
            }
            else {
                throw new Error('Grid: unexpected direction when reaching upper y boundary.');
            }
        }
        else if (new_yidx < this.grid.getYlim[0]) {
            if (this.status.direction == GridDirection.Down) {
                // min y value reached, change direction to left, i.e. keep
                // increasing difficulty
                new_yidx = this.grid.getYlim()[0];
                this.status.direction = GridDirection.Left;
                this.status.reversal = true;
                this.reversal_counter = this.reversal_counter + 1;
                new_xidx = new_xidx - this.status.stepsize[0];
                if (new_xidx < this.grid.getXlim()[0]) {
                    throw new Error('Grid: Lower left corner reached.');
                }
            }
            else {
                throw new Error('Grid: unexpected direction when reaching lower y boundary.');
            }
        }
        else if (new_xidx > this.grid.getXlim[1]) {
            if (this.status.direction == GridDirection.Right) {
                // max x value reached, change direction to up, i.e. keep
                // decreasing difficulty
                new_xidx = this.grid.getXlim()[1];
                this.status.direction = GridDirection.Up;
                this.status.reversal = true;
                this.reversal_counter = this.reversal_counter + 1;
                new_yidx = new_yidx + this.status.stepsize[1];
                if (new_yidx > this.grid.getYlim()[1]) {
                    throw new Error('Grid: Upper right corner reached.');
                }
            }
            else {
                throw new Error('Grid: unexpected direction when reaching upper x boundary.');
            }
        }
        else if (new_xidx < this.grid.getXlim[0]) {
            if (this.status.direction == GridDirection.Left) {
                // min x value reached, change direction to down, i.e. keep
                // increasing difficulty
                new_xidx = this.grid.getXlim()[0];
                this.status.direction = GridDirection.Down;
                this.status.reversal = true;
                this.reversal_counter = this.reversal_counter + 1;
                new_yidx = new_yidx - this.status.stepsize[1];
                if (new_yidx < this.grid.getYlim()[0]) {
                    throw new Error('Grid: Lower left corner reached.');
                }
            }
            else {
                throw new Error('Grid: unexpected direction when reaching lower x boundary.');
            }
        }
        // check stopping conditions
        if (this.reversal_counter >= this.n_max_reversals) {
            this.status.finished = true;
        }
        if (this.history.length >= this.n_max_steps - 1) {
            this.status.finished = true;
        }
        // save the status to grid history
        var status_clone = Object.assign({}, this.status);
        this.history.push(status_clone);
        // move to new point
        this.status.xidx = new_xidx;
        this.status.yidx = new_yidx;
    };
    GridTracker.prototype.getCurrentGridParameters = function () {
        return this.grid.getGridValues(this.status.xidx, this.status.yidx);
    };
    return GridTracker;
}());
exports.GridTracker = GridTracker;
var ParamGrid = (function () {
    function ParamGrid(params) {
        if (params.xmax < params.xmin) {
            throw new Error('xmin must be less than xmax');
        }
        this.xlim = [params.xmin, params.xmax];
        if (params.ymax < params.ymin) {
            throw new Error('ymin must be less than ymax');
        }
        this.ylim = [params.ymin, params.ymax];
        this.xresolution = params.xres;
        this.yresolution = params.yres;
        var x_size = Math.floor((params.xmax - params.xmin) / params.xres) + 1;
        this.xvalues = new Array(x_size);
        this.x_max_idx = x_size - 1;
        for (var i = 0; i < this.x_max_idx; i++) {
            this.xvalues[i] = params.xmin + i * params.xres;
        }
        this.xvalues[this.x_max_idx] = params.xmax;
        var y_size = Math.floor((params.ymax - params.ymin) / params.yres) + 1;
        this.yvalues = new Array(y_size);
        this.y_max_idx = y_size - 1;
        for (var i = 0; i < this.y_max_idx; i++) {
            this.yvalues[i] = params.ymin + i * params.yres;
        }
        this.yvalues[this.y_max_idx] = params.ymax;
    }
    ParamGrid.prototype.getXlim = function () {
        return this.xlim;
    };
    ParamGrid.prototype.getYlim = function () {
        return this.ylim;
    };
    ParamGrid.prototype.getGridValues = function (xidx, yidx) {
        if (xidx > this.x_max_idx) {
            throw new Error('xidx exceeds grid range');
        }
        if (yidx > this.y_max_idx) {
            throw new Error('yidx exceeds grid range');
        }
        return [this.xvalues[xidx], this.yvalues[yidx]];
    };
    return ParamGrid;
}());
exports.ParamGrid = ParamGrid;
//# sourceMappingURL=data:application/json;base64,